// $Id$
/** \file readme.dox Contains main doxygen example explanation page. */

/** \mainpage

\section sec_summary Summary

This %example shows how to use \b both <a
href="http://flex.sourceforge.net/">flex</a> and <a
href="http://www.gnu.org/software/bison/">bison</a> in C++ mode. This way both
lexer and parser code and data is encapsulated into classes. Thus the lexer and
parser are fully re-entrant, because all state variables are contained in the
class objects. Furthermore multiple different lexer-parser pairs can easily be
linked into one binary, because they just have different class names and/or are
located in a different namespace.

\section sec_website_license Website / License

The current %example package can be downloaded from
http://idlebox.net/2007/cpp-flex-bison/

The parts of the %example code written by myself are released under the public
domain or at your option under the <a href="http://sam.zoy.org/wtfpl/">Do What
The Fuck You Want To Public License (WTFPL)</a> which can be found in the file
COPYING. There are some special GPL license exceptions for the included bison
and flex source files.

\section sec_whyuse Why use these old tools?

Well, they are here to stay and they work well. These days there are much more
sophisticated C++ parser generation frameworks around:

\li Most well-known is the <a href="http://spirit.sourceforge.net">Boost.Spirit
parser framework</a> \li and the <a href="http://www.antlr.org">ANTLR parser
generator</a> \li Less well known is the <a
href="http://cttl.sourceforge.net/">Common Text Transformation Library</a>.

All these libraries do good jobs when you need to generate parsers for more
difficult grammars.

However if you write a program with one of the frameworks above, then your
users need that parser framework installed to compile your program. But <b>flex
and bison require no compile-time dependencies</b>, because they generate fully
autonomous source code. (And flex and bison are installed almost everywhere.) 
So far I have not found any modern parser generator which writes independent
code.

\section sec_source_files Source and Generated Files

The src directory contains the following source files:

\li scanner.ll contains the flex source for the c++ lexical scanner.
\li scanner.cc is generated from scanner.ll by flex.
\li scanner.h defines the lexer class example::Scanner.
\li FlexLexer.h copied from flex distribution. Defines the abstract lexer class.

\li parser.yy is the %example bison parser grammar.
\li parser.cc generated from parser.yy by bison.
\li parser.h generated from parser.yy by bison.
\li y.tab.h contains nothing. Just forwards to parser.h

\li location.hh copied by bison. Contains something required by the parser class.
\li position.hh same.
\li stack.hh same.

\li driver.h defines the example::Driver class which puts together lexer and parser.
\li driver.cc implementation for driver.h

\li expression.h defines the example's calculator node classes.
\li exprtest.cc contains a main function to run the %example calculator.

\li readme.dox doxygen explanation text, which you are reading right now.

So if you wish to create a program using a C++ flex lexer and bison parser, you
need the following files:
\li scanner.ll, scanner.h, FlexLexer.h
\li parser.yy, y.tab.h
\li location.hh, position.hh, stack.hh (are created by bison when run on the grammar)
\li driver.h, driver.cc

\subsection subsec_namespacelibrary Namespace and Library

The scanner, parser and driver classes are located within the example
namespace. When coding a larger program, I believe it is most convenient to put
all scanner/parser source files into a separate directory and build a static
library. Then all parts of the parser are located in a separate namespace and
directory.

\section sec_overview Code Overview

This is a brief overview of the code's structure. Further detailed information
is contained in the doxygen documentation, comments in the source and
ultimately in the code itself.

\subsection subsec_overview_scanner Scanner

The input is first converted by the lexical scanner into tokens. The scanner is
defined by the code in scanner.ll . From this file flex generates the file
scanner.cc which mainly contains a function called yylex(). This function
returns the next token for the parser. For a C++ scanner the yylex() function
is contained in a class, which is named yyFlexLexer by default. It is declared
in the FlexLexer.h and is derived from the abstract FlexLexer class.

By defining the macro yyFlexLexer -> ExampleFlexLexer in scanner.h, the default
name of the scanner class is changed. Furthermore to extend yylex()'s parameter
list, the class example::Scanner is derived from the ExampleFlexLexer class. It
is mainly a forwarding class. Using the macro YY_DECL the yylex() function
generated by flex is renamed to example::Scanner::lex().

Another change to the default flex code is that the token type is changed from
int to the enum example::Parser::token defined by parser.

\subsection subsec_overview_parser Parser

Bison's support for C++ is much more sophisticated. In C++ mode it generates a
class named example::Parser, which is located in parser.cc and declared in
parser.h . The header file also defines the scanner tokens.

In the %example calculator the bison code constructs a calculation node
tree. The tree's nodes are derived from CalcNode and are evaluated to output
the parsed expression's result.

\subsection subsec_overview_driver Driver

The example::Driver class brings the two components scanner and parser classes
together. It is the context parameter of the parser class. The hook between
scanner object and parser object is done by defining the yylex() macro to be
"driver.lexer->lex". This way the bison parser requests the next token from the
scanner object contained within the driver.

The example::Driver object can be accessed by the bison actions. Therefore it
will contain a reference to the data classes filled by the parser's rules. In
the example it contains a reference to the CalcContext. Thus a refernce to a
CalcContext must be given to the constructor of example::Driver. This
CalcContext object will then be filled with the parsed data.

To initiate parsing the example::Driver class contains the three functions
example::Driver::parse_stream(), example::Driver::parse_file() and
example::Driver::parse_string().

*/

